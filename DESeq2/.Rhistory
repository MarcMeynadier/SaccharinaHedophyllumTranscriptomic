colData(vsd)$condition],xlab="sampling sites",ylab="genes",margins = c(2, 11),
lmat=rbind(c(5, 4, 2), c(6, 1, 3)), lhei=c(2.5, 5), lwid=c(1, 10, 1))
heatmap.2(assay(vsd)[topVarGenesRld,], trace="none",scale="row", dendrogram="column", keysize=1, key.par = list(cex=0.5),
col=colorRampPalette(rev(brewer.pal(9,"RdBu")))(255), cexRow=0.5, cexCol=0.7, labCol=F,
ColSideColors=c(gm="gray", pv="green", sa="yellow")[
colData(vsd)$condition],xlab="sampling sites",ylab="genes",margins = c(2, 11))
dev.off()
dev.off()
heatmap.2(assay(vsd)[topVarGenesRld,], trace="none",scale="row", dendrogram="column", keysize=1, key.par = list(cex=0.5),
col=colorRampPalette(rev(brewer.pal(9,"RdBu")))(255), cexRow=0.5, cexCol=0.7, labCol=F,
ColSideColors=c(gm="gray", pv="green", sa="yellow")[
colData(vsd)$condition],xlab="sampling sites",ylab="genes",margins = c(2, 11))
png(paste(outputPath,'DGE_heatmap_rlog_adult_preliminarySamples.png',sep=''), width=12, height=12, units = "in", res = 300)
heatmap.2(assay(vsd)[topVarGenesRld,], trace="none",scale="row", dendrogram="column", keysize=1, key.par = list(cex=0.5),
col=colorRampPalette(rev(brewer.pal(9,"RdBu")))(255), cexRow=0.5, cexCol=0.7, labCol=F,
ColSideColors=c(gm="gray", pv="green", sa="yellow")[
colData(vsd)$condition],xlab="sampling sites",ylab="genes",margins = c(2, 11))
png(paste(outputPath,'DGE_heatmap_rlog_adult_preliminarySamples.png',sep=''), width=20, height=20, units = "in", res = 300)
heatmap.2(assay(vsd)[topVarGenesRld,], trace="none",scale="row", dendrogram="column", keysize=1, key.par = list(cex=0.5),
col=colorRampPalette(rev(brewer.pal(9,"RdBu")))(255), cexRow=0.5, cexCol=0.7, labCol=F,
ColSideColors=c(gm="gray", pv="green", sa="yellow")[
colData(vsd)$condition],xlab="sampling sites",ylab="genes",margins = c(2, 11))
heatmap.2(assay(vsd)[topVarGenesRld,], trace="none",scale="row", dendrogram="column", keysize=1, key.par = list(cex=0.5),
col=colorRampPalette(rev(brewer.pal(9,"RdBu")))(255), cexRow=0.5, cexCol=0.7, labCol=F,
ColSideColors=c(gm="gray", pv="green", sa="yellow")[
colData(vsd)$condition],xlab="sampling sites",ylab="genes",margins = c(2, 11))
dev.off()
dev.off()
dev.off()
dev.off()
heatmap.2(assay(vsd)[topVarGenesRld,], trace="none",scale="row", dendrogram="column", keysize=1, key.par = list(cex=0.5),
col=colorRampPalette(rev(brewer.pal(9,"RdBu")))(255), cexRow=0.5, cexCol=0.7, labCol=F,
ColSideColors=c(gm="gray", pv="green", sa="yellow")[
colData(vsd)$condition],xlab="sampling sites",ylab="genes",margins = c(2, 11))
heatmap.2(assay(vsd)[topVarGenesRld,], trace="none",scale="row", dendrogram="column", dendrogram="row",keysize=1, key.par = list(cex=0.5),
col=colorRampPalette(rev(brewer.pal(9,"RdBu")))(255), cexRow=0.5, cexCol=0.7, labCol=F,
ColSideColors=c(gm="gray", pv="green", sa="yellow")[
colData(vsd)$condition],xlab="sampling sites",ylab="genes",margins = c(2, 11))
heatmap.2(assay(vsd)[topVarGenesRld,], trace="none",scale="row", dendrogram=c("column","row"),keysize=1, key.par = list(cex=0.5),
col=colorRampPalette(rev(brewer.pal(9,"RdBu")))(255), cexRow=0.5, cexCol=0.7, labCol=F,
ColSideColors=c(gm="gray", pv="green", sa="yellow")[
colData(vsd)$condition],xlab="sampling sites",ylab="genes",margins = c(2, 11))
heatmap.2(assay(vsd)[topVarGenesRld,], trace="none",scale="row",keysize=1, key.par = list(cex=0.5),
col=colorRampPalette(rev(brewer.pal(9,"RdBu")))(255), cexRow=0.5, cexCol=0.7, labCol=F,
ColSideColors=c(gm="gray", pv="green", sa="yellow")[
colData(vsd)$condition],xlab="sampling sites",ylab="genes",margins = c(2, 11))
heatmap.2(assay(vsd)[topVarGenesRld,], trace="none",scale="row",keysize=1, key.par = list(cex=0.5),
col=colorRampPalette(rev(brewer.pal(9,"RdBu")))(255), cexRow=0.5, cexCol=0.7, labCol=F,
main = "Differentially expressed genes\nin preliminary samples (rlog transformation)"
ColSideColors=c(gm="gray", pv="green", sa="yellow")[
colData(vsd)$condition],xlab="sampling sites",ylab="genes",margins = c(2, 11))
heatmap.2(assay(vsd)[topVarGenesRld,], trace="none",scale="row",keysize=1, key.par = list(cex=0.5),
col=colorRampPalette(rev(brewer.pal(9,"RdBu")))(255), cexRow=0.5, cexCol=0.7, labCol=F,
main = "Differentially expressed genes\nin preliminary samples (rlog transformation)",
ColSideColors=c(gm="gray", pv="green", sa="yellow")[
colData(vsd)$condition],xlab="sampling sites",ylab="genes",margins = c(2, 11))
heatmap.2(assay(rld)[topVarGenesRld,], trace="none",scale="row",keysize=1, key.par = list(cex=0.5),
col=colorRampPalette(rev(brewer.pal(9,"RdBu")))(255), cexRow=0.5, cexCol=0.7, labCol=F,
main = "Differentially expressed genes\nin preliminary samples (rlog transformation)",
ColSideColors=c(gm="gray", pv="green", sa="yellow")[
colData(vsd)$condition],xlab="sampling sites",ylab="genes",margins = c(2, 11))
heatmap.2(assay(vsd)[topVarGenesVsd,], trace="none",scale="row",keysize=1, key.par = list(cex=0.5),
col=colorRampPalette(rev(brewer.pal(9,"RdBu")))(255), cexRow=0.5, cexCol=0.7, labCol=F,
main = "Differentially expressed genes\nin preliminary samples (vst transformation)",
ColSideColors=c(gm="gray", pv="green", sa="yellow")[
colData(vsd)$condition],xlab="sampling sites",ylab="genes",margins = c(2, 11))
# vst transformation
topVarGenesVsd <- head(order(rowVars(assay(vsd)), decreasing=TRUE), 100 )
heatmap.2(assay(vsd)[topVarGenesVsd,], trace="none",scale="row",keysize=1, key.par = list(cex=0.5),
col=colorRampPalette(rev(brewer.pal(9,"RdBu")))(255), cexRow=0.5, cexCol=0.7, labCol=F,
main = "Differentially expressed genes\nin preliminary samples (vst transformation)",
ColSideColors=c(gm="gray", pv="green", sa="yellow")[
colData(vsd)$condition],xlab="sampling sites",ylab="genes",margins = c(2, 11))
# Packages and dependence
packageCheckClassic <- function(x){
for( i in x ){
#  require returns TRUE invisibly if it was able to load package
if( ! require( i , character.only = TRUE ) ){
#  If package was not able to be loaded then re-install
install.packages( i , dependencies = TRUE )
#  Load package after installing
require( i , character.only = TRUE )
}
}
}
# Packages and dependence
packageCheckClassic <- function(x){
for( i in x ){
#  require returns TRUE invisibly if it was able to load package
if( ! require( i , character.only = TRUE ) ){
#  If package was not able to be loaded then re-install
install.packages( i , dependencies = TRUE )
#  Load package after installing
require( i , character.only = TRUE )
}
}
}
packageCheckClassic(c('DESeq2','devtools','BiocManager','ggplot2','ggrepel','markdown','pheatmap','RColorBrewer','genefilter','gplots'))
#BiocManager::install('tximport', force = TRUE)
#BiocManager::install('apeglm')
#BiocManager::install('ashr')
#BiocManager::install("EnhancedVolcano")
library('tximport')
library('apeglm')
library('ashr')
library('EnhancedVolcano')
# Working environment
scriptPath<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(scriptPath)
samples<-read.table('tximport_design_preliminarySamples.txt',header=T)
tx2gene<-read.table('tx2gene',header=T)
scriptPath <- sub("/[^/]+$", "", scriptPath)
dataPath<-'/data/net/5_kallisto/larvaeAdultTranscriptome/adult/nov2016'
outputPath<-paste(scriptPath,'/output/DESeq2/1_preliminarySamples/',sep='')
wdPath<-paste(scriptPath,dataPath,sep='')
setwd(wdPath)
files<-paste0(samples$sample,'.tsv')
names(files)<-samples$sample
txi<-tximport(files = files,type='kallisto',tx2gene = tx2gene)
names(txi)
head(txi$counts)
# Packages and dependence
packageCheckClassic <- function(x){
for( i in x ){
#  require returns TRUE invisibly if it was able to load package
if( ! require( i , character.only = TRUE ) ){
#  If package was not able to be loaded then re-install
install.packages( i , dependencies = TRUE )
#  Load package after installing
require( i , character.only = TRUE )
}
}
}
packageCheckClassic(c('DESeq2','devtools','BiocManager','ggplot2','ggrepel','markdown','RColorBrewer','genefilter','gplots'))
#BiocManager::install('tximport', force = TRUE)
#BiocManager::install('apeglm')
#BiocManager::install('ashr')
#BiocManager::install("EnhancedVolcano")
library('tximport')
library('apeglm')
library('ashr')
library('EnhancedVolcano')
source_url("https://raw.githubusercontent.com/obigriffith/biostar-tutorials/master/Heatmaps/heatmap.3.R")
#install_github('cran/heatmap.plus')
library(heatmap.plus)
# Working environment
scriptPath<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(scriptPath)
samplesSingle<-read.table('tximport_design_spatialComparisonSingle.txt',header=T)
samplesPaired<-read.table('tximport_design_spatialComparisonPaired.txt',header=T)
tx2gene<-read.table('tx2gene_fullTranscriptome',header=T)
scriptPath <- sub("/[^/]+$", "", scriptPath)
dataPath<-'/data/net/5_kallisto/larvaeJuvenileAdultTranscriptome/adult/2_spatialComparison'
outputPath<-paste(scriptPath,'/output/DESeq2/larvaeJuvenileAdultTranscriptome/adult/2_spatialComparison/',sep='')
wdPath<-paste(scriptPath,dataPath,sep='')
setwd(wdPath)
# Data importation - txImport
filesPaired<-paste0(samplesPaired$sample,'.tsv')
filesSingle<-paste0(samplesSingle$sample,'.tsv')
names(filesPaired)<-samplesPaired$sample
names(filesSingle)<-samplesSingle$sample
# Working environment
scriptPath<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(scriptPath)
samples <- read.table('tximport_design_spatialComparison.txt',header=T)
samplesSingle<-read.table('tximport_design_spatialComparisonSingle.txt',header=T)
samplesPaired<-read.table('tximport_design_spatialComparisonPaired.txt',header=T)
tx2gene<-read.table('tx2gene_fullTranscriptome',header=T)
scriptPath <- sub("/[^/]+$", "", scriptPath)
dataPath<-'/data/net/5_kallisto/larvaeJuvenileAdultTranscriptome/adult/2_spatialComparison'
outputPath<-paste(scriptPath,'/output/DESeq2/larvaeJuvenileAdultTranscriptome/adult/2_spatialComparison/',sep='')
wdPath<-paste(scriptPath,dataPath,sep='')
setwd(wdPath)
filesPaired<-paste0(samplesPaired$sample,'.tsv')
# Data importation - txImport
files<-paste0(samples$sample,'.tsv')
filesPaired<-paste0(samplesPaired$sample,'.tsv')
filesSingle<-paste0(samplesSingle$sample,'.tsv')
names(filesPaired)<-samplesPaired$sample
txi<-tximport(files = files,type='kallisto',tx2gene = tx2gene)
txiPaired<-tximport(files = filesPaired,type='kallisto',tx2gene = tx2gene)
txiPaired<-tximport(files = filesPaired,type='kallisto',tx2gene = tx2gene)
all(file.exists(files))
file.exists(files)
ls
library(readr)
gm_VS_sa_single_file_annotation <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/gm_VS_sa_single_file_annotation.csv")
View(gm_VS_sa_single_file_annotation)
library(readr)
gm_VS_pv_X_gm_VS_sa_shared_genes_comparison <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/gm_VS_pv_X_gm_VS_sa_shared_genes_comparison.csv")
View(gm_VS_pv_X_gm_VS_sa_shared_genes_comparison)
library(readr)
gm_VS_pv_X_gm_VS_sa_unshared_genes_comparison <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/gm_VS_pv_X_gm_VS_sa_unshared_genes_comparison.csv")
View(gm_VS_pv_X_gm_VS_sa_unshared_genes_comparison)
library(readr)
gm_gm_tro_VS_gm_gm_bck_X_sp_sp_tro_VS_sp_sp_bck_shared_genes_comparison <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/gm_gm_tro_VS_gm_gm_bck_X_sp_sp_tro_VS_sp_sp_bck_shared_genes_comparison.csv")
View(gm_gm_tro_VS_gm_gm_bck_X_sp_sp_tro_VS_sp_sp_bck_shared_genes_comparison)
library(readr)
gm_gm_tro_VS_gm_gm_bck_X_sp_sp_tro_VS_sp_sp_bck_unshared_genes_comparison <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/gm_gm_tro_VS_gm_gm_bck_X_sp_sp_tro_VS_sp_sp_bck_unshared_genes_comparison.csv")
View(gm_gm_tro_VS_gm_gm_bck_X_sp_sp_tro_VS_sp_sp_bck_unshared_genes_comparison)
library(readr)
pv_gm_trt_VS_pv_pv_bck_single_file_annotation <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/pv_gm_trt_VS_pv_pv_bck_single_file_annotation.csv")
View(pv_gm_trt_VS_pv_pv_bck_single_file_annotation)
library(readr)
sp_gm_trt_VS_sp_sp_bck_single_file_annotation <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/sp_gm_trt_VS_sp_sp_bck_single_file_annotation.csv")
View(sp_gm_trt_VS_sp_sp_bck_single_file_annotation)
library(readr)
gm_VS_pv_X_gm_VS_sa_shared_genes_comparison <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/gm_VS_pv_X_gm_VS_sa_shared_genes_comparison.csv")
View(gm_VS_pv_X_gm_VS_sa_shared_genes_comparison)
library(readr)
gm_VS_pv_X_gm_VS_sa_unshared_genes_comparison <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/gm_VS_pv_X_gm_VS_sa_unshared_genes_comparison.csv")
View(gm_VS_pv_X_gm_VS_sa_unshared_genes_comparison)
library(readr)
sp_gm_gas_VS_sp_sp_bck_single_file_annotation <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/sp_gm_gas_VS_sp_sp_bck_single_file_annotation.csv")
View(sp_gm_gas_VS_sp_sp_bck_single_file_annotation)
library(readr)
pv_pv_gas_VS_pv_pv_bck_single_file_annotation <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/pv_pv_gas_VS_pv_pv_bck_single_file_annotation.csv")
View(pv_pv_gas_VS_pv_pv_bck_single_file_annotation)
library(readr)
gm_gm_gas_VS_gm_gm_bck_X_pv_pv_gas_VS_pv_pv_bck_unshared_genes_comparison <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/gm_gm_gas_VS_gm_gm_bck_X_pv_pv_gas_VS_pv_pv_bck_unshared_genes_comparison.csv")
View(gm_gm_gas_VS_gm_gm_bck_X_pv_pv_gas_VS_pv_pv_bck_unshared_genes_comparison)
library(readr)
gm_gm_gas_VS_gm_gm_bck_X_pv_pv_gas_VS_pv_pv_bck_shared_genes_comparison <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/gm_gm_gas_VS_gm_gm_bck_X_pv_pv_gas_VS_pv_pv_bck_shared_genes_comparison.csv")
View(gm_gm_gas_VS_gm_gm_bck_X_pv_pv_gas_VS_pv_pv_bck_shared_genes_comparison)
library(readr)
gm_gm_gas_VS_gm_gm_bck_single_file_annotation <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/gm_gm_gas_VS_gm_gm_bck_single_file_annotation.csv")
View(gm_gm_gas_VS_gm_gm_bck_single_file_annotation)
library(readr)
sp_gm_gas_VS_sp_sp_bck_single_file_annotation <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/sp_gm_gas_VS_sp_sp_bck_single_file_annotation.csv")
View(sp_gm_gas_VS_sp_sp_bck_single_file_annotation)
library(readr)
sp_gm_gas_VS_sp_sp_bck_single_file_annotation <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/sp_gm_gas_VS_sp_sp_bck_single_file_annotation.csv")
View(sp_gm_gas_VS_sp_sp_bck_single_file_annotation)
library(readr)
pv_gm_gas_VS_pv_pv_bck_single_file_annotation <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/pv_gm_gas_VS_pv_pv_bck_single_file_annotation.csv")
View(pv_gm_gas_VS_pv_pv_bck_single_file_annotation)
library(readr)
gm_VS_pv_X_gm_VS_sa_shared_genes_comparison <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/gm_VS_pv_X_gm_VS_sa_shared_genes_comparison.csv")
View(gm_VS_pv_X_gm_VS_sa_shared_genes_comparison)
library(readr)
gm_VS_pv_X_gm_VS_sa_unshared_genes_comparison <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/gm_VS_pv_X_gm_VS_sa_unshared_genes_comparison.csv")
View(gm_VS_pv_X_gm_VS_sa_unshared_genes_comparison)
library(readr)
gm_VS_sa_single_file_annotation <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/gm_VS_sa_single_file_annotation.csv")
View(gm_VS_sa_single_file_annotation)
library(readr)
gm_VS_pv_single_file_annotation <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/gm_VS_pv_single_file_annotation.csv")
View(gm_VS_pv_single_file_annotation)
library(readr)
pv_gm_gas_VS_pv_pv_bck_single_file_annotation <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/pv_gm_gas_VS_pv_pv_bck_single_file_annotation.csv")
View(pv_gm_gas_VS_pv_pv_bck_single_file_annotation)
library(readr)
gm_sp_trt_VS_sp_sp_bck_single_file_annotation <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/gm_sp_trt_VS_sp_sp_bck_single_file_annotation.csv")
View(gm_sp_trt_VS_sp_sp_bck_single_file_annotation)
library(readr)
gm_pv_trt_VS_gm_gm_bck_single_file_annotation <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/gm_pv_trt_VS_gm_gm_bck_single_file_annotation.csv")
View(gm_pv_trt_VS_gm_gm_bck_single_file_annotation)
setwd("~/")
# Edit these to match your data file names:
input="DESeq2_results_adult_gardenShort_pv_gm_gas_VS_pv_pv_bck_GOMWU.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="associationFile.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="MF" # either MF, or BP, or CC
source("gomwu.functions.R")
setwd("~/Documents/Projet/code/data/net/7_functionnalAnnotation/GO_MWU")
# Edit these to match your data file names:
input="DESeq2_results_adult_gardenShort_pv_gm_gas_VS_pv_pv_bck_GOMWU.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="associationFile.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="MF" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="DESeq2_results_adult_gardenShort_pv_gm_gas_VS_pv_pv_bck_GOMWU.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="associationFile.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="MF" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="DESeq2_results_adult_gardenShort_pv_gm_gas_VS_pv_pv_bck_GOMWU.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="associationFile.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="MF" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="DESeq2_results_adult_trueTransplant_gm_gm_tro_VS_gm_gm_bck_GOMWU.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
function (file, header = FALSE, sep = "", quote = "\"'", dec = ".",
numerals = c("allow.loss", "warn.loss", "no.loss"), row.names,
col.names, as.is = !stringsAsFactors, na.strings = "NA",
colClasses = NA, nrows = -1, skip = 0, check.names = TRUE,
fill = !blank.lines.skip, strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#", allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = FALSE, fileEncoding = "", encoding = "unknown",
text, skipNul = FALSE)
# Edit these to match your data file names:
input="DESeq2_results_adult_trueTransplant_gm_gm_tro_VS_gm_gm_bck_GOMWU.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="associationFile.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="MF" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="DESeq2_results_adult_trueTransplant_gm_gm_tro_VS_gm_gm_bck_GOMWU.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="associationFile.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="MF" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
setwd("~/Documents/Projet/code/data/net/7_functionnalAnnotation/GO_MWU")
# Edit these to match your data file names:
input="DESeq2_results_adult_trueTransplant_gm_gm_tro_VS_gm_gm_bck_GOMWU.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="associationFile.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="MF" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="DESeq2_results_adult_trueTransplant_gm_gm_tro_VS_gm_gm_bck_GOMWU.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="associationFile.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="MF" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
input="DESeq2_results_adult_trueTransplant_gm_gm_tro_VS_gm_gm_bck_GOMWU.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="associationFile.tab" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="MF" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
library(readr)
pv_VS_gm_preliminarySamples_single_file_annotation <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/expressedGeneMatching/pv_VS_gm_preliminarySamples_single_file_annotation.csv")
View(pv_VS_gm_preliminarySamples_single_file_annotation)
library(readr)
sp_VS_gm_juvenile_single_file_annotation <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/expressedGeneMatching/sp_VS_gm_juvenile_single_file_annotation.csv")
View(sp_VS_gm_juvenile_single_file_annotation)
library(readr)
adult_gardenShort_pv_pv_bck_VS_sp_sp_bck_subset_X_adult_trueTransplant_pv_pv_bck_VS_gm_gm_bck_subset <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/functionnalGenesAnalysis/ontologizer_analysis/adult_gardenShort_pv_pv_bck_VS_sp_sp_bck_subset_X_adult_trueTransplant_pv_pv_bck_VS_gm_gm_bck_subset.csv")
View(adult_gardenShort_pv_pv_bck_VS_sp_sp_bck_subset_X_adult_trueTransplant_pv_pv_bck_VS_gm_gm_bck_subset)
library(readr)
adult_gardenShort_pv_pv_bck_VS_sp_sp_bck_subset_X_adult_trueTransplant_pv_pv_bck_VS_gm_gm_bck_subset <- read_csv("Documents/Projet/code/data/net/7_functionnalAnnotation/functionnalGenesAnalysis/ontologizer_analysis/adult_gardenShort_pv_pv_bck_VS_sp_sp_bck_subset_X_adult_trueTransplant_pv_pv_bck_VS_gm_gm_bck_subset.csv")
View(adult_gardenShort_pv_pv_bck_VS_sp_sp_bck_subset_X_adult_trueTransplant_pv_pv_bck_VS_gm_gm_bck_subset)
library(readr)
adult_gardenShort_gm_gm_gas_VS_gm_gm_bck_single_file_filtered <- read_csv("Documents/Projet/code/data/net/8_functionnalAnnotation/functionnalGenesAnalysis/DESeq2_X_ontologizer/adult_gardenShort_gm_gm_gas_VS_gm_gm_bck_single_file_filtered.csv")
View(adult_gardenShort_gm_gm_gas_VS_gm_gm_bck_single_file_filtered)
library(readr)
adult_preliminarySamples_pv_VS_gm_single_file_filtered <- read_csv("Documents/Projet/code/data/net/8_functionnalAnnotation/functionnalGenesAnalysis/DESeq2_X_ontologizer/adult_preliminarySamples_pv_VS_gm_single_file_filtered.csv")
View(adult_preliminarySamples_pv_VS_gm_single_file_filtered)
library(readr)
adult_preliminarySamples_pv_VS_sa_single_file_filtered <- read_csv("Documents/Projet/code/data/net/8_functionnalAnnotation/functionnalGenesAnalysis/DESeq2_X_ontologizer/adult_preliminarySamples_pv_VS_sa_single_file_filtered.csv")
View(adult_preliminarySamples_pv_VS_sa_single_file_filtered)
library(readr)
adult_preliminarySamples_sa_VS_gm_single_file_filtered <- read_csv("Documents/Projet/code/data/net/8_functionnalAnnotation/functionnalGenesAnalysis/DESeq2_X_ontologizer/adult_preliminarySamples_sa_VS_gm_single_file_filtered.csv")
View(adult_preliminarySamples_sa_VS_gm_single_file_filtered)
library(readr)
adult_preliminarySamples_pv_VS_gm_single_file <- read_csv("Documents/Projet/code/data/net/8_functionnalAnnotation/functionnalGenesAnalysis/DESeq2_analysis/adult_preliminarySamples_pv_VS_gm_single_file.csv")
View(adult_preliminarySamples_pv_VS_gm_single_file)
library(readr)
adult_preliminarySamples_sa_VS_gm_single_file <- read_csv("Documents/Projet/code/data/net/8_functionnalAnnotation/functionnalGenesAnalysis/DESeq2_analysis/adult_preliminarySamples_sa_VS_gm_single_file.csv")
View(adult_preliminarySamples_sa_VS_gm_single_file)
library(readr)
adult_preliminarySamples_sa_VS_gm_single_file <- read_csv("Documents/Projet/code/data/net/8_functionnalAnnotation/functionnalGenesAnalysis/DESeq2_analysis/adult_preliminarySamples_sa_VS_gm_single_file.csv")
View(adult_preliminarySamples_sa_VS_gm_single_file)
library(readr)
adult_preliminarySamples_pv_VS_gm_single_file <- read_csv("Documents/Projet/code/data/net/8_functionnalAnnotation/functionnalGenesAnalysis/DESeq2_analysis/adult_preliminarySamples_pv_VS_gm_single_file.csv")
View(adult_preliminarySamples_pv_VS_gm_single_file)
library(readr)
adult_preliminarySamples_pv_VS_gm_single_file_filtered <- read_csv("Documents/Projet/code/data/net/8_functionnalAnnotation/functionnalGenesAnalysis/DESeq2_X_ontologizer/adult_preliminarySamples_pv_VS_gm_single_file_filtered.csv")
View(adult_preliminarySamples_pv_VS_gm_single_file_filtered)
library(readr)
adult_gardenShort_gm_gm_gas_VS_gm_gm_bck_singleFile_filtered <- read_csv("Documents/Projet/code/data/net/8_functionnalAnnotation/functionnalGenesAnalysis/DESeq2_X_ontologizer/adult_gardenShort_gm_gm_gas_VS_gm_gm_bck_singleFile_filtered.csv")
View(adult_gardenShort_gm_gm_gas_VS_gm_gm_bck_singleFile_filtered)
library(readr)
adult_gardenShort_sp_sp_gas_VS_sp_sp_bck_singleFile_filtered <- read_csv("Documents/Projet/code/data/net/8_functionnalAnnotation/functionnalGenesAnalysis/DESeq2_X_ontologizer/adult_gardenShort_sp_sp_gas_VS_sp_sp_bck_singleFile_filtered.csv")
View(adult_gardenShort_sp_sp_gas_VS_sp_sp_bck_singleFile_filtered)
?ggVenn
?ggvenn
install.packages(c("Seurat", "SeuratObject", "patchwork"))
.libPaths()
library(venn)
# Working environment and data loading
scriptPath<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(scriptPath)
#candidateGenes<-read.csv('candidateGenes.csv',header=T,sep=',')
S_C_VS_T1<-read.table('Saccharina/S_C_VS_T1.csv',header=T,sep=',')
S_C_VS_T2<-read.table('Saccharina/S_C_VS_T2.csv',header=T,sep=',')
S_C_VS_T3<-read.table('Saccharina/S_C_VS_T3.csv',header=T,sep=',')
S_T1_VS_T2<-read.table('Saccharina/S_T1_VS_T2.csv',header=T,sep=',')
S_T1_VS_T3<-read.table('Saccharina/S_T1_VS_T3.csv',header=T,sep=',')
S_T2_VS_T3<-read.table('Saccharina/S_T2_VS_T3.csv',header=T,sep=',')
H_C_VS_T1<-read.table('Hedophylum/H_C_VS_T1.csv',header=T,sep=',')
H_C_VS_T2<-read.table('Hedophylum/H_C_VS_T2.csv',header=T,sep=',')
H_C_VS_T3<-read.table('Hedophylum/H_C_VS_T3.csv',header=T,sep=',')
H_T1_VS_T2<-read.table('Hedophylum/H_T1_VS_T2.csv',header=T,sep=',')
H_T1_VS_T3<-read.table('Hedophylum/H_T1_VS_T3.csv',header=T,sep=',')
H_T2_VS_T3<-read.table('Hedophylum/H_T2_VS_T3.csv',header=T,sep=',')
extractCol <- function(f,name,sign) {
if (sign == "pos") {
f = f[f$log2FoldChange > 0,]
}
else {
f = f[f$log2FoldChange < 0,]
}
write.table(f$X, file=name, sep = "\n",
row.names = FALSE,col.names = FALSE)}
extractCol(S_C_VS_T1,"venn/S_C_VS_T1_pos.txt","pos")
extractCol(S_C_VS_T2,"venn/S_C_VS_T2_pos.txt","pos")
extractCol(S_C_VS_T3,"venn/S_C_VS_T3_pos.txt","pos")
extractCol(S_C_VS_T1,"venn/S_C_VS_T1_neg.txt","neg")
extractCol(S_C_VS_T2,"venn/S_C_VS_T2_neg.txt","neg")
extractCol(S_C_VS_T3,"venn/S_C_VS_T3_neg.txt","neg")
extractCol(S_T1_VS_T2,"venn/S_T1_VS_T2_pos.txt","pos")
extractCol(S_T1_VS_T3,"venn/S_T1_VS_T3_pos.txt","pos")
extractCol(S_T2_VS_T3,"venn/S_T2_VS_T3_pos.txt","pos")
extractCol(S_T1_VS_T2,"venn/S_T1_VS_T2_neg.txt","neg")
extractCol(S_T1_VS_T3,"venn/S_T1_VS_T3_neg.txt","neg")
extractCol(S_T2_VS_T3,"venn/S_T2_VS_T3_neg.txt","neg")
extractCol(H_C_VS_T1,"venn/H_C_VS_T1_pos.txt","pos")
extractCol(H_C_VS_T2,"venn/H_C_VS_T2_pos.txt","pos")
extractCol(H_C_VS_T3,"venn/H_C_VS_T3_pos.txt","pos")
extractCol(H_C_VS_T1,"venn/H_C_VS_T1_neg.txt","neg")
extractCol(H_C_VS_T2,"venn/H_C_VS_T2_neg.txt","neg")
extractCol(H_C_VS_T3,"venn/H_C_VS_T3_neg.txt","neg")
extractCol(H_T1_VS_T2,"venn/H_T1_VS_T2_pos.txt","pos")
extractCol(H_T1_VS_T3,"venn/H_T1_VS_T3_pos.txt","pos")
extractCol(H_T2_VS_T3,"venn/H_T2_VS_T3_pos.txt","pos")
extractCol(H_T1_VS_T2,"venn/H_T1_VS_T2_neg.txt","neg")
extractCol(H_T1_VS_T3,"venn/H_T1_VS_T3_neg.txt","neg")
extractCol(H_T2_VS_T3,"venn/H_T2_VS_T3_neg.txt","neg")
# T1 vs T2 = #7F8A99
# T1 vs T3 = #6B4668
# T2 vs T3 = #DF6051
venn(3,snames = "C_VS_T1, C_VS_T2, C_VS_T3",zcolor = c("#4F9AC7","#C3B4B0","#AF707F"),opacity = 0.6,box=F)
venn(3,snames = "T1_VS_T2, T1_VS_T3, T2_VS_T3",zcolor = c("#7F8A99","#6B4668","#DF6051"),opacity = 0.6,box=F)
library(tidyverse)
read_tsv("tmp.tsv", col_types = "ccci") %>%
ggplot(aes(x=month, y=count, fill=type)) + geom_col() + facet_grid(.~id)
